# reasons you might want to use `environment.yaml` instead of `requirements.txt`:
# - pip installs packages in a loop, without ensuring dependencies across all packages
#   are fulfilled simultaneously, but conda achieves proper dependency control across
#   all packages
# - conda allows for installing packages without requiring certain compilers or
#   libraries to be available in the system, since it installs precompiled binaries

name: tensor_frames

channels:
  - pytorch
  - nvidia
  - pyg
  - conda-forge

# it is strongly recommended to specify versions of packages installed through conda
# to avoid situation when version-unspecified packages install their latest major
# versions which can sometimes break things

# current approach below keeps the dependencies in the same major versions across all
# users, but allows for different minor and patch versions of packages where backwards
# compatibility is usually guaranteed

dependencies:
  - python=3.11
  - jupyter
  - hydra-core=1.*
  - pytorch=2.*
  - torchvision=0.*
  - pytorch-cuda=12.1
  - lightning=2.*
  - torchmetrics=0.*
  - numpy
  - rich=13.*
  - pre-commit=3.*
  - pytest=7.*
  - pytest-cov
  - h5py
  - e3nn
  - tqdm
  - nodejs # just for yaml formatting pre-commit
  - sphinx
  - sphinx-rtd-theme
  - zarr
  - pytorch-scatter
  - pytorch-cluster
  - trimesh
  - pocl

  - pip>=23
  - pip:
      - open3d
      - torch-geometric==2.4.0
      - scipy==1.10 # this causes reinstall to fix problem with torch and open3d
      - pyvista[all]
      - hydra-optuna-sweeper
      - hydra-colorlog
      - rootutils
      - gpustat
      - ase>=3.19
      - polars
      - loguru
